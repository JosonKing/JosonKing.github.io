(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{372:function(e,t,a){"use strict";a.r(t);var r=a(42),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[e._v("#")]),e._v(" 基本用法")]),e._v(" "),a("p",[e._v("React 只是 DOM 的一个抽象层，并不是 Web 应用的完整解决方案。有两个方面，它没涉及。")]),e._v(" "),a("ul",[a("li",[e._v("代码结构")]),e._v(" "),a("li",[e._v("组件之间的通信")])]),e._v(" "),a("h2",{attrs:{id:"零、你可能不需要-redux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#零、你可能不需要-redux"}},[e._v("#")]),e._v(" 零、你可能不需要 Redux")]),e._v(" "),a("p",[e._v("不需要使用 Redux：")]),e._v(" "),a("ul",[a("li",[e._v("用户的使用方式非常简单")]),e._v(" "),a("li",[e._v("用户之间没有协作")]),e._v(" "),a("li",[e._v("不需要与服务器大量交互，也没有使用 WebSocket")]),e._v(" "),a("li",[e._v("视图层（View）只从单一来源获取数据")])]),e._v(" "),a("p",[e._v("Redux 的适用场景：多交互、多数据源：")]),e._v(" "),a("ul",[a("li",[e._v("用户的使用方式复杂")]),e._v(" "),a("li",[e._v("不同身份的用户有不同的使用方式（比如普通用户和管理员）")]),e._v(" "),a("li",[e._v("多个用户之间可以协作")]),e._v(" "),a("li",[e._v("与服务器大量交互，或者使用了WebSocket")]),e._v(" "),a("li",[e._v("View要从多个来源获取数据")])]),e._v(" "),a("p",[e._v("从组件角度看，如果你的应用有以下场景，可以考虑使用 Redux：")]),e._v(" "),a("ul",[a("li",[e._v("某个组件的状态，需要共享")]),e._v(" "),a("li",[e._v("某个状态需要在任何地方都可以拿到")]),e._v(" "),a("li",[e._v("一个组件需要改变全局状态")]),e._v(" "),a("li",[e._v("一个组件需要改变另一个组件的状态")])]),e._v(" "),a("h2",{attrs:{id:"一、预备知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、预备知识"}},[e._v("#")]),e._v(" 一、预备知识")]),e._v(" "),a("p",[e._v("只需要懂 React （如果还懂 Flux 更好）\n"),a("a",{attrs:{href:"https://redux.js.org/introduction/getting-started",target:"_blank",rel:"noopener noreferrer"}},[e._v("redux文档"),a("OutboundLink")],1),e._v("\n配套视频 "),a("a",{attrs:{href:"https://egghead.io/courses/getting-started-with-redux",target:"_blank",rel:"noopener noreferrer"}},[e._v("前30集"),a("OutboundLink")],1),e._v("，"),a("a",{attrs:{href:"https://egghead.io/courses/building-react-applications-with-idiomatic-redux",target:"_blank",rel:"noopener noreferrer"}},[e._v("后30集"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"二、设计思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、设计思想"}},[e._v("#")]),e._v(" 二、设计思想")]),e._v(" "),a("p",[e._v("（1）Web 应用是一个状态机，视图与状态是一一对应的。")]),e._v(" "),a("p",[e._v("（2）所有的状态，保存在一个对象里面。")]),e._v(" "),a("p",[e._v("#三、基本概念和 API")]),e._v(" "),a("h3",{attrs:{id:"_1-store"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-store"}},[e._v("#")]),e._v(" 1. Store")]),e._v(" "),a("p",[e._v("Store 就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 Store。")]),e._v(" "),a("p",[e._v("Redux 提供createStore这个函数，用来生成 Store。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { createStore } from 'redux';\nconst store = createStore(fn);\n")])])]),a("p",[e._v("上面代码中，createStore函数接受另一个函数作为参数，返回新生成的 Store 对象。")]),e._v(" "),a("h3",{attrs:{id:"_2-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-state"}},[e._v("#")]),e._v(" 2. State")]),e._v(" "),a("p",[e._v("Store对象包含所有数据。如果想得到某个时点的数据，就要对 Store 生成快照。这种时点的数据集合，就叫做 State。")]),e._v(" "),a("p",[e._v("当前时刻的 State，可以通过store.getState()拿到。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { createStore } from 'redux';\nconst store = createStore(fn);\n\nconst state = store.getState();\n")])])]),a("p",[e._v("Redux 规定， 一个 State 对应一个 View。只要 State 相同，View 就相同。你知道 State，就知道 View 是什么样，反之亦然。")]),e._v(" "),a("h3",{attrs:{id:"_3-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-action"}},[e._v("#")]),e._v(" 3. Action")]),e._v(" "),a("p",[e._v("State 的变化，会导致 View 的变化。但是，用户接触不到 State，只能接触到 View。所以，State 的变化必须是 View 导致的。Action 就是 View 发出的通知，表示 State 应该要发生变化了。")]),e._v(" "),a("p",[e._v("Action 是一个对象。其中的type属性是必须的，表示 Action 的名称。其他属性可以自由设置。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const action = {\n  type: 'ADD_TODO',\n  payload: 'Learn Redux'\n};\n")])])]),a("p",[e._v("Action 描述当前发生的事情。改变 State 的唯一办法，就是使用 Action。它会运送数据到 Store。")]),e._v(" "),a("h3",{attrs:{id:"_4-action-creator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-action-creator"}},[e._v("#")]),e._v(" 4. Action Creator")]),e._v(" "),a("p",[e._v("View 要发送多少种消息，就会有多少种 Action。如果都手写，会很麻烦。可以定义一个函数来生成 Action，这个函数就叫 Action Creator。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const ADD_TODO = '添加 TODO';\n\nfunction addTodo(text) {\n  return {\n    type: ADD_TODO,\n    text\n  }\n}\n\nconst action = addTodo('Learn Redux');\n")])])]),a("h3",{attrs:{id:"_5-store-dispatch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-store-dispatch"}},[e._v("#")]),e._v(" 5. store.dispatch()")]),e._v(" "),a("p",[e._v("store.dispatch()是 View 发出 Action 的唯一方法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { createStore } from 'redux';\nconst store = createStore(fn);\n\nstore.dispatch({\n  type: 'ADD_TODO',\n  payload: 'Learn Redux'\n});\n")])])]),a("h3",{attrs:{id:"_6-reducer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-reducer"}},[e._v("#")]),e._v(" 6. Reducer")]),e._v(" "),a("p",[e._v("Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer。")]),e._v(" "),a("p",[e._v("Reducer 是一个函数，它接受 Action 和当前 State 作为参数，返回一个新的 State。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const reducer = function (state, action) {\n  // ...\n  return new_state;\n};\n")])])]),a("p",[e._v("整个应用的初始状态，可以作为 State 的默认值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const defaultState = 0;\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case 'ADD':\n      return state + action.payload;\n    default: \n      return state;\n  }\n};\n\nconst state = reducer(1, {\n  type: 'ADD',\n  payload: 2\n});\n")])])]),a("p",[e._v("实际应用中，Reducer 函数不用像上面这样手动调用，store.dispatch方法会触发 Reducer 的自动执行。为此，Store 需要知道 Reducer 函数，做法就是在生成 Store 的时候，将 Reducer 传入createStore方法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { createStore } from 'redux';\nconst store = createStore(reducer);\n")])])]),a("p",[e._v("上面代码中，createStore接受 Reducer 作为参数，生成一个新的 Store。以后每当store.dispatch发送过来一个新的 Action，就会自动调用 Reducer，得到新的 State。")]),e._v(" "),a("h3",{attrs:{id:"_7-纯函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-纯函数"}},[e._v("#")]),e._v(" 7. 纯函数")]),e._v(" "),a("p",[e._v("Reducer 函数最重要的特征是，它是一个纯函数。也就是说，只要是同样的输入，必定得到同样的输出。")]),e._v(" "),a("p",[e._v("纯函数是函数式编程的概念，必须遵守以下一些约束。")]),e._v(" "),a("ul",[a("li",[e._v("不得改写参数")]),e._v(" "),a("li",[e._v("不能调用系统 I/O 的API")]),e._v(" "),a("li",[e._v("不能调用Date.now()或者Math.random()等不纯的方法，因为每次会得到不一样的结果")])]),e._v(" "),a("p",[e._v("由于 Reducer 是纯函数，就可以保证同样的State，必定得到同样的 View。但也正因为这一点，Reducer 函数里面不能改变 State，必须返回一个全新的对象")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// State 是一个对象\nfunction reducer(state, action) {\n  return Object.assign({}, state, { thingToChange });\n  // 或者\n  return { ...state, ...newState };\n}\n\n// State 是一个数组\nfunction reducer(state, action) {\n  return [...state, newItem];\n}\n")])])]),a("p",[e._v("最好把 State 对象设成只读。你没法改变它，要得到新的 State，唯一办法就是生成一个新对象。这样的好处是，任何时候，与某个 View 对应的 State 总是一个不变的对象。")]),e._v(" "),a("h3",{attrs:{id:"_8-store-subscribe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-store-subscribe"}},[e._v("#")]),e._v(" 8. store.subscribe()")]),e._v(" "),a("p",[e._v("Store 允许使用store.subscribe方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { createStore } from 'redux';\nconst store = createStore(reducer);\n\nstore.subscribe(listener);\n")])])]),a("p",[e._v("只要把 View 的更新函数（对于 React 项目，就是组件的render方法或setState方法）放入listen，就会实现 View 的自动渲染。")]),e._v(" "),a("p",[e._v("store.subscribe方法返回一个函数，调用这个函数就可以解除监听。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let unsubscribe = store.subscribe(() =>\n  console.log(store.getState())\n);\n\nunsubscribe();\n")])])]),a("h2",{attrs:{id:"四、store-的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、store-的实现"}},[e._v("#")]),e._v(" 四、Store 的实现")]),e._v(" "),a("p",[e._v("Redux 涉及的基本概念，可以发现 Store 提供了三个方法。")]),e._v(" "),a("ul",[a("li",[e._v("store.getState()")]),e._v(" "),a("li",[e._v("store.dispatch()")]),e._v(" "),a("li",[e._v("store.subscribe()")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { createStore } from 'redux';\nlet { subscribe, dispatch, getState } = createStore(reducer);\n")])])]),a("p",[e._v("createStore方法还可以接受第二个参数，表示 State 的最初状态。这通常是服务器给出的。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let store = createStore(todoApp, window.STATE_FROM_SERVER)\n")])])]),a("p",[e._v("createStore方法的一个简单实现：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const createStore = (reducer) => {\n  let state;\n  let listeners = [];\n\n  const getState = () => state;\n\n  const dispatch = (action) => {\n    state = reducer(state, action);\n    listeners.forEach(listener => listener());\n  };\n\n  const subscribe = (listener) => {\n    listeners.push(listener);\n    return () => {\n      listeners = listeners.filter(l => l !== listener);\n    }\n  };\n\n  dispatch({});\n\n  return { getState, dispatch, subscribe };\n};\n")])])]),a("h2",{attrs:{id:"五、reducer-的拆分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、reducer-的拆分"}},[e._v("#")]),e._v(" 五、Reducer 的拆分")]),e._v(" "),a("p",[e._v("Reducer 函数负责生成 State。由于整个应用只有一个 State 对象，包含所有数据，对于大型应用来说，这个 State 必然十分庞大，导致 Reducer 函数也十分庞大。")]),e._v(" "),a("p",[e._v("上面代码中，三种 Action 分别改变 State 的三个属性。")]),e._v(" "),a("ul",[a("li",[e._v("ADD_CHAT：chatLog属性")]),e._v(" "),a("li",[e._v("CHANGE_STATUS：statusMessage属性")]),e._v(" "),a("li",[e._v("CHANGE_USERNAME：userName属性")])]),e._v(" "),a("p",[e._v("我们可以把 Reducer 函数拆分。不同的函数负责处理不同属性，最终把它们合并成一个大的 Reducer 即可。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const chatReducer = (state = defaultState, action = {}) => {\n  return {\n    chatLog: chatLog(state.chatLog, action),\n    statusMessage: statusMessage(state.statusMessage, action),\n    userName: userName(state.userName, action)\n  }\n};\n")])])]),a("p",[e._v("这种拆分与 React 应用的结构相吻合：一个 React 根组件由很多子组件构成。这就是说，子组件与子 Reducer 完全可以对应。")]),e._v(" "),a("p",[e._v("Redux 提供了一个combineReducers方法，用于 Reducer 的拆分。你只要定义各个子 Reducer 函数，然后用这个方法，将它们合成一个大的 Reducer。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { combineReducers } from 'redux';\n\nconst chatReducer = combineReducers({\n  chatLog,\n  statusMessage,\n  userName\n})\n\nexport default todoApp;\n")])])]),a("p",[e._v("上面的代码通过combineReducers方法将三个子 Reducer 合并成一个大的函数。")]),e._v(" "),a("p",[e._v("这种写法有一个前提，就是 State 的属性名必须与子 Reducer 同名。如果不同名，就要采用下面的写法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const reducer = combineReducers({\n  a: doSomethingWithA,\n  b: processB,\n  c: c\n})\n\n// 等同于\nfunction reducer(state = {}, action) {\n  return {\n    a: doSomethingWithA(state.a, action),\n    b: processB(state.b, action),\n    c: c(state.c, action)\n  }\n}\n")])])]),a("p",[e._v("combineReducers()做的就是产生一个整体的 Reducer 函数。该函数根据 State 的 key 去执行相应的子 Reducer，并将返回结果合并成一个大的 State 对象。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const combineReducers = reducers => {\n  return (state = {}, action) => {\n    return Object.keys(reducers).reduce(\n      (nextState, key) => {\n        nextState[key] = reducers[key](state[key], action);\n        return nextState;\n      },\n      {} \n    );\n  };\n};\n")])])]),a("p",[e._v("可以把所有子 Reducer 放在一个文件里面，然后统一引入。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { combineReducers } from 'redux'\nimport * as reducers from './reducers'\n\nconst reducer = combineReducers(reducers)\n")])])]),a("h2",{attrs:{id:"六、工作流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、工作流程"}},[e._v("#")]),e._v(" 六、工作流程")]),e._v(" "),a("p",[a("img",{attrs:{src:"http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091802.jpg",alt:"Redux 的工作流程"}})]),e._v(" "),a("ol",[a("li",[e._v("用户发出 Action")])]),e._v(" "),a("p",[a("code",[e._v("store.dispatch(action);")])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Store 自动调用 Reducer，并且传入两个参数：当前 State 和收到的 Action。 Reducer 会返回新的 State")])]),e._v(" "),a("p",[a("code",[e._v("let nextState = todoApp(previousState, action);")])]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v("State 一旦有变化，Store 就会调用监听函数")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 设置监听函数\nstore.subscribe(listener);\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("listener可以通过store.getState()得到当前状态。如果使用的是 React，这时可以触发重新渲染 View。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function listerner() {\n  let newState = store.getState();\n  component.setState(newState);   \n}\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);